C#: O(n^2)
public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        for(int i = 0; i< nums.Length; i++){
            for(int j = i+1; j< nums.Length; j++){
                int result = nums[i] + nums[j];
               if (result == target){
                   return new int[]{i,j};
               }
            }
        }
    return new int[2];
    }
}

Python: O(n^2)
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                result = nums[i] + nums[j]
                if result == target:
                    return [i,j]
					
Python 2:O(nlogn) - all sorting at least O(nlogn)
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        sortedNums = sorted(nums)
        i = 0
        j= len(nums)-1
        finalResult = []
        while sortedNums[i] + sortedNums[j] != target:
            result = sortedNums[i] + sortedNums[j]
            if(result>target):
                j = j-1
            elif(result<target):
                i=i+1
        for k in range(len(nums)):
            if nums[k] == sortedNums[i] or nums[k] == sortedNums[j]:
                finalResult.append(k)
        return finalResult